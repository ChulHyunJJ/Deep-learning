{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"조철현 - _MNIST 학습 성능 높이기","provenance":[{"file_id":"1VBSFTQ-c2KA3wQaF9JAjRV-x3h0nmnJE","timestamp":1601794383448}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"LAl5zfiIZdR3"},"source":["# MNIST 학습 성능 높이기"]},{"cell_type":"code","metadata":{"id":"FwUy7mx_KjAb","executionInfo":{"status":"ok","timestamp":1601795536932,"user_tz":-540,"elapsed":3242,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class SGD:\n","\n","  def __init__(self, learning_rate=0.01):\n","    self.learning_rate = learning_rate\n","\n","  def update(self, params, grads):\n","    for key in params.keys():\n","      params[key] -= self.learning_rate * grads[key]\n","      "],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"9MIfOV6xK16f","executionInfo":{"status":"ok","timestamp":1601795537342,"user_tz":-540,"elapsed":3632,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class Momentum:\n","\n","  def __init__(self, learning_rate=0.01, momentum=0.9):\n","    self.learning.rate = learning_rate\n","    self.momentum = momentum\n","    self.v = None\n","\n","  def update(self, params, grads):\n","    if self.v is None:\n","      self.v = {}\n","      for key, val in params.items():\n","        self.v[key] = np.zeros_like(val)\n","      \n","    for key in params.keys():\n","      self.v[key] = self.momentum * self.v[key] - self.learning_rate * grads[key]\n","      params += self.v[key]"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"N4TORymQK-yE","executionInfo":{"status":"ok","timestamp":1601795537344,"user_tz":-540,"elapsed":3568,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class AdaGrad:\n","\n","  def __init__(self, learning_rate=0.01):\n","    self.learning_rate = learning_rate\n","    self.h = None\n","\n","  def update(self, params, grads):\n","    if self.h is None:\n","      self.h = {}\n","      for key, val in params.items():\n","        self.h[key] = np.zeros_like(val)\n","\n","    for key in params.keys():\n","      self.h[key] += grads[key] * grads[key]\n","      params[key] -= self.learning_rate * grads[key] / (np.sqrt(self.h[key] + 1e-7))"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"wROsDRxDGC75","executionInfo":{"status":"ok","timestamp":1601795537345,"user_tz":-540,"elapsed":3537,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class RMSProp:\n","\n","  def __init__(self, learning_rate = 0.01, decay_rate = 0.99):\n","    self.learning_rate = learning_rate\n","    self.decay_rate = decay_rate\n","    self.h = None\n","\n","  def update(self, params, grads):\n","    if self.h is None:\n","      self.h = {}\n","      for key, val in params.items():\n","        self.h[key] = np.zeros_like(val)\n","\n","    for key in params.keys():\n","      self.h[key] *= self.decay_rate\n","      self.h[key] += (1 - self.decay_rate) * grads[key] * grads[key]\n","      params[key] -= self.learning_rate * grads[key] / (np.sqrt(self.h[key] + 1e-7))"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"BFyE0iaFLL0M","executionInfo":{"status":"ok","timestamp":1601795537346,"user_tz":-540,"elapsed":3499,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class Adam:\n","\n","  def __init__(self, learning_rate=0.001, beta1=0.9, beta2=0.999):\n","    self.learning_rate = learning_rate\n","    self.beta1 = beta1\n","    self.beta2 = beta2\n","    self.iter = 0\n","    self.m = None\n","    self.v = None\n","\n","  def update(self, params, grads):\n","    if self.m is None:\n","      self.m, self.v = {}, {}\n","      for key, val in params.items():\n","        self.m[key] = np.zeros_like(val)\n","        self.v[key] = np.zeros_like(val)\n","\n","    self.iter += 1\n","    learning_rate_t = self.learning_rate * np.sqrt(1.0 - self.beta2**self.iter) / (1.0 - self.beta1**self.iter)\n","\n","    for key in params.keys():\n","      self.m[key] += (1 - self.beta1) * (grads[key] - self.m[key])\n","      self.v[key] += (1 - self.beta2) * (grads[key]**2 - self.v[key])\n","\n","      params[key] -= learning_rate_t * self.m[key] / (np.sqrt(self.v[key]) + 1e-7)\n"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sgz8_GjSveBi"},"source":["### Modules Import"]},{"cell_type":"code","metadata":{"id":"5p9ArEUkInYk","executionInfo":{"status":"ok","timestamp":1601795538764,"user_tz":-540,"elapsed":4900,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from collections import OrderedDict"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2dg7-vr1vj1_"},"source":["### 데이터 로드"]},{"cell_type":"code","metadata":{"id":"Vu_5fUTVvfyD","executionInfo":{"status":"ok","timestamp":1601795539205,"user_tz":-540,"elapsed":5290,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}},"outputId":"3ee422d6-1608-40b7-9fa3-cf7531e6e7e8","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["np.random.seed(42)\n","\n","mnist = tf.keras.datasets.mnist\n","\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","\n","num_classes = 10"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"BCILIUjovmhj"},"source":["### 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"vZX6J11WvgsD","executionInfo":{"status":"ok","timestamp":1601795539208,"user_tz":-540,"elapsed":5233,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["x_train = x_train[:10000]\n","x_test = x_test[:3000]\n","\n","y_train = y_train[:10000]\n","y_test = y_test[:3000]"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"KqckLwhYvgwI","executionInfo":{"status":"ok","timestamp":1601795539209,"user_tz":-540,"elapsed":5216,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["x_train, x_test = x_train.reshape(-1, 28*28).astype(np.float32), x_test.reshape(-1, 28*28).astype(np.float32)\n","\n","x_train = x_train / .255\n","x_test = x_test / .255\n","\n","y_train = np.eye(num_classes)[y_train]"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"dwwZGRjbtXDy","executionInfo":{"status":"ok","timestamp":1601795539210,"user_tz":-540,"elapsed":5180,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}},"outputId":"0922ab7b-4734-4721-9da3-e70b4eb5973f","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print(x_train.shape)\n","print(y_train.shape)\n","print(x_test.shape)\n","print(y_test.shape)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["(10000, 784)\n","(10000, 10)\n","(3000, 784)\n","(3000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"eVKs6vDIwCZN"},"source":["### Util Functions"]},{"cell_type":"code","metadata":{"id":"NVYcEN1pvhWK","executionInfo":{"status":"ok","timestamp":1601795539212,"user_tz":-540,"elapsed":5168,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["def softmax(x):\n","  if x.ndim == 2:\n","    x = x.T\n","    x = x - np.max(x, axis=0)\n","    y = np.exp(x) / np.sum(np.exp(x), axis=0)\n","    return y.T\n","\n","  x = x - np.max(x)\n","  return np.exp(x) / np.sum(np.exp(x))\n","\n","def mean_squared_error(pred_y, true_y):\n","  return 0.5 * np.sum((pred_y - true_y)**2)\n","\n","def cross_entropy_error(pred_y, true_y):\n","  if pred_y.ndim == 1:\n","    true_y = true_y.reshape(1, true_y.size)\n","    pred_y = pred_y.reshape(1, pred_y.size)\n","\n","  if true_y.size == pred_y.size:\n","    true_y = true_y.argmax(axis=1)\n","\n","  batch_size = pred_y.shape[0]\n","  return -np.sum(np.log(pred_y[np.arange(batch_size), true_y] + 1e-7)) / batch_size"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mgkGwvZewGE2"},"source":["### Util Classes"]},{"cell_type":"markdown","metadata":{"id":"efZ5-0QIwF7y"},"source":["#### ReLU"]},{"cell_type":"code","metadata":{"id":"oUN_eIfjvhc4","executionInfo":{"status":"ok","timestamp":1601795539213,"user_tz":-540,"elapsed":5146,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class ReLU():\n","  def __init__(self):\n","    self.out = None\n","\n","  def forward(self, x):\n","    self.mask = (x < 0)\n","    out = x.copy()\n","    out[x<0] = 0\n","    return out\n","\n","  def backward(self, dout):\n","    dout[self.mask] = 0\n","    dx = dout\n","    return dx"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jq_Umt-qwOLx"},"source":["#### Sigmoid"]},{"cell_type":"code","metadata":{"id":"4LdQiHGHvha7","executionInfo":{"status":"ok","timestamp":1601795539214,"user_tz":-540,"elapsed":5135,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class Sigmoid():\n","  def __init__(self):\n","    self.out = None\n","\n","  def forward(self, x):\n","    out = 1 / (1 + np.exp(-x))\n","    return out\n","\n","  def backward(self, dout):\n","    dx = dout * (1.0 - self.out) * self.dout\n","    return dx"],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fm_FInuUwQUQ"},"source":["#### Layer"]},{"cell_type":"code","metadata":{"id":"_OgM39CRvhQK","executionInfo":{"status":"ok","timestamp":1601795539214,"user_tz":-540,"elapsed":5045,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class Layer():\n","\n","  def __init__(self, W, b):\n","    self.W = W\n","    self.b = b\n","\n","    self.x = None\n","    self.origin_x_shape = None\n","\n","    self.dW = None\n","    self.db = None\n","\n","  def forward(self, x):\n","    self.origin_x_shape = x.shape\n","\n","    x = x.reshape(x.shape[0], -1)\n","    self.x = x\n","    out = np.dot(self.x, self.W) + self.b\n","\n","    return out\n","\n","  def backward(self, dout):\n","    dx = np.dot(dout, self.W.T)\n","    self.dW = np.dot(self.x.T, dout)\n","    self.db = np.sum(dout, axis=0)\n","    dx = dx.reshape(*self.origin_x_shape)\n","    return dx"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PSArAOBAzZ8H"},"source":["#### Batch Normalization"]},{"cell_type":"code","metadata":{"id":"rZwJVo30zbIZ","executionInfo":{"status":"ok","timestamp":1601795539618,"user_tz":-540,"elapsed":5436,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class BatchNormalization:\n","\n","  def __init__(self, gamma, beta, momentum=0.9, running_mean = None, running_var = None):\n","    self.gamma = gamma\n","    self.beta = beta\n","    self.momentum = momentum\n","    self.input_shape = None\n","\n","    self.running_mean = running_mean\n","    self.running_var = running_var\n","\n","    self.batch_size = None\n","    self.xc = None\n","    self.std = None\n","    self.dgamma = None\n","    self.dbeta = None\n","\n","  def forward(self, input_data, is_train=True):\n","    self.input_shape = input_data.shape\n","    if input_data.ndim != 2:\n","      N, C, H, W = input_data.shape\n","      input_data = input_data.reshape(N, -1)\n","\n","    out = self.__forward(input_data, is_train)\n","\n","    return out.reshape(*self.input_shape)\n","\n","  def __forward(self, input_data, is_train):\n","    if self.running_mean is None:\n","      N, D = input_data.shape\n","      self.running_mean = np.zeros(D)\n","      self.running_var = np.zeros(D)\n","\n","    if is_train is True:\n","      mu = input_data.mean(axis=0)\n","      xc = input_data - mu\n","      var = np.mean(xc**2, axis=0)\n","      std = np.sqrt(var + 10e-7)\n","      xn = xc / std\n","\n","      self.batch_size = input_data.shape[0]\n","      self.xc = xc\n","      self.xn = xn\n","      self.std = std\n","      self.running_mean = self.momentum * self.running_mean + (1 - self.momentum) * mu\n","      self.running_var = self.momentum * self.running_var + ( 1-self.momentum) * var\n","    \n","    else:\n","      xc = input_data - self.running_mean\n","      xn = xc / ((np.sqrt(self.running_var + 10e-7)))\n","\n","    out = self.gamma * xn + self.beta\n","    return out\n","\n","  def backward(self, dout):\n","    if dout.ndim != 2:\n","      N, C, H, W = dout.shape\n","      dout = dout.reshape(N, -1)\n","\n","    dx = self.__backward(dout)\n","\n","    dx = dx.reshape(*self.input_shape)\n","    return dx\n","\n","  def __backward(self, dout):\n","    dbeta = dout.sum(axis=0)\n","    dgamma = np.sum(self.xn * dout, axis=0)\n","    dxn = self.gamma * dout\n","    dxc = dxn / self.std\n","    dstd = -np.sum((dxn * self.xc) / (self.std * self.std), axis=0)\n","    dvar = 0.5 * dstd / self.std\n","    dxc += (2.0 / self.batch_size) * self.xc * dvar\n","    dmu = np.sum(dxc, axis=0)\n","    dx = dxc - dmu / self.batch_size\n","\n","    self.dgamma = dgamma\n","    self.dbeta = dbeta\n","\n","    return dx"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"CGtkUah6wYEm","executionInfo":{"status":"ok","timestamp":1601795539619,"user_tz":-540,"elapsed":5394,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class BatchNormalization: \n","  def __init__(self, gamma, beta, momentum=0.9, running_mean=None, running_var=None): \n","    self.gamma = gamma \n","    self.beta = beta \n","    self.momentum = momentum \n","    self.input_shape = None \n","\n","    self.running_mean = running_mean \n","    self.running_var = running_var \n","    self.batch_size = None \n","    self.xc = None \n","    self.std = None \n","    self.dgamma = None \n","    self.dbeta = None \n","\n","  def forward(self, input_data, is_train=True): \n","    self.input_shape = input_data.shape \n","\n","    if input_data.ndim != 2: \n","      N, C, H, W = input_data.shape \n","      input_data = input_data.reshape(N, -1) \n","\n","    out = self.__forward(input_data, is_train)\n","    return out.reshape(*self.input_shape) \n","\n","  def __forward(self, input_data, is_train): \n","    if self.running_mean is None: \n","      N, D = input_data.shape \n","      self.running_mean = np.zeros(D) \n","      self.running_var = np.zeros(D) \n","\n","    if is_train: \n","      mu = input_data.mean(axis=0) \n","      xc = input_data - mu \n","      var = np.mean(xc**2, axis=0) \n","      std = np.sqrt(var + 10e-7) \n","      xn = xc / std \n","\n","      self.batch_size = input_data.shape[0] \n","      self.xc = xc \n","      self.xn = xn \n","      self.std = std \n","      self.running_mean = self.momentum * self.running_mean + (1-self.momentum) * mu \n","      self.running_var = self.momentum * self.running_var + (1-self.momentum) * var \n","\n","    else: \n","      xc = input_data - self.running_mean \n","      xn = xc / ((np.sqrt(self.running_var + 10e-7))) \n","    \n","    out = self.gamma * xn + self.beta   \n","    return out \n","\n","  def backward(self, dout): \n","    if dout.ndim != 2: \n","      N, C, H, W = dout.shape \n","      dout = dout.reshape(N, -1) \n","\n","    dx = self.__backward(dout) \n","    dx = dx.reshape(*self.input_shape) \n","    return dx \n","\n","  def __backward(self, dout): \n","    dbeta = dout.sum(axis=0) \n","    dgamma = np.sum(self.xn * dout, axis=0) \n","    dxn = self.gamma * dout \n","    dxc = dxn / self.std \n","    dstd = -np.sum((dxn * self.xc) / (self.std * self.std), axis=0) \n","    dvar = 0.5 * dstd / self.std \n","    dxc += (2.0 / self.batch_size) * self.xc * dvar \n","    dmu = np.sum(dxc, axis=0) \n","    dx = dxc - dmu / self.batch_size \n","    self.dgamma = dgamma \n","    self.dbeta = dbeta \n","    \n","    return dx "],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7zcprwHBzBPn"},"source":["#### Dropout\n"]},{"cell_type":"code","metadata":{"id":"tiHwGZQgzCtb","executionInfo":{"status":"ok","timestamp":1601795539620,"user_tz":-540,"elapsed":5296,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class Dropout: \n","  def __init__(self, dropout_ratio=0.5): \n","    self.dropout_ratio = dropout_ratio \n","    self.mask = None \n","\n","  def forward(self, input_data, is_train=True): \n","    if is_train: \n","      self.mask = np.random.rand(*input_data.shape) > self.dropout_ratio \n","      return input_data * self.mask \n","    else: \n","      return input_data * (1.0 - self.dropout_ratio) \n","\n","  def backward(self, dout): \n","    return dout * self.mask "],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MUO5dDGtwa62"},"source":["#### Softmax"]},{"cell_type":"code","metadata":{"id":"Fe4RY7pVvhN5","executionInfo":{"status":"ok","timestamp":1601795539621,"user_tz":-540,"elapsed":5284,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class SoftMax():\n","\n","  def __init__(self):\n","    self.loss = None\n","    self.y = None\n","    self.t = None\n","\n","  def forward(self, x, t):\n","    self.t = t\n","    self.y = softmax(x)\n","    self.loss = cross_entropy_error(self.y, self.t)\n","\n","    return self.loss\n","  \n","  def backward(self, dout=1):\n","    batch_size = self.t.shape[0]\n","\n","    if self.t.size == self.y.size:\n","      dx = (self.y - self.t) / batch_size\n","    else:\n","      dx = self.y.copy()\n","      dx[np.arange(batch_size), self.t] -= 1\n","      dx = dx / batch_size\n","\n","    return dx"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BIjbtanh10Mt"},"source":["## Model"]},{"cell_type":"code","metadata":{"id":"Zd57-rXNIgjS","executionInfo":{"status":"ok","timestamp":1601795539623,"user_tz":-540,"elapsed":5258,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class MyModel:\n","\n","  def __init__(self, input_size, hidden_size_list, output_size, activation='relu', decay_lambda=0, use_dropout=False, dropout_ratio = 0.5, use_batchnorm=False):\n","    self.input_size = input_size\n","    self.output_size = output_size\n","    self.hidden_size_list = hidden_size_list\n","    self.hidden_layer_num = len(hidden_size_list)\n","    self.use_dropout = use_dropout\n","    self.decay_lambda = decay_lambda\n","    self.use_batchnorm = use_batchnorm\n","    self.params = {}\n","\n","    self.__init_weight(activation)\n","\n","    activation_layer = {'sigmoid':Sigmoid, 'relu':ReLU}\n","    self.layers = OrderedDict()\n","\n","    for idx in range(1, self.hidden_layer_num+1):\n","      self.layers['Layer' + str(idx)] = Layer(self.params['W' + str(idx)], self.params['b' + str(idx)])\n","      if self.use_batchnorm:\n","        self.params['gamma' + str(idx)] = np.ones(hidden_size_list[idx-1])\n","        self.params['beta' + str(idx)] = np.zeros(hidden_size_list[idx-1])\n","        self.layers['BatchNorm' + str(idx)] = BatchNormalization(self.params['gamma' + str(idx)], self.params['beta' + str(idx)])\n","\n","      self.layers['Activation_function' + str(idx)] = activation_layer[activation]()\n","\n","      if self.use_dropout:\n","        self.layers['Dropout' + str(idx)] = Dropout(dropout_ratio)\n","\n","    idx = self.hidden_layer_num + 1\n","    self.layers['Layer' + str(idx)] = Layer(self.params['W' + str(idx)], self.params['b' + str(idx)])\n","    self.last_layer = SoftMax()\n","\n","  def __init_weight(self, activation):\n","    all_size_list = [self.input_size] + self.hidden_size_list + [self.output_size]\n","\n","    for idx in range(1, len(all_size_list)):\n","      scale = None\n","      if activation.lower() == 'relu':\n","        scale = np.sqrt(2.0 / all_size_list[idx-1])\n","      elif activation.lower() == 'sigmoid':\n","        scale = np.sqrt(1.0 / all_size_list[idx-1])\n","\n","      self.params['W' + str(idx)] = scale * np.random.randn(all_size_list[idx-1], all_size_list[idx])\n","      self.params['b' + str(idx)] = np.zeros(all_size_list[idx])\n","\n","  def predict(self, x, is_train=False):\n","    for key, layer in self.layers.items():\n","      if 'Dropout' in key or 'BatchNorm' in key:\n","        x = layer.forward(x, is_train)\n","      else:\n","        x = layer.forward(x)\n","\n","    return x\n","\n","  def loss(self, x, t, is_train=False):\n","    y = self.predict(x, is_train)\n","\n","    weight_decay = 0\n","    for idx in range(1, self.hidden_layer_num + 2):\n","      W = self.params['W' + str(idx)]\n","      weight_decay += 0.5 * self.decay_lambda * np.sum(W**2)\n","    \n","    return self.last_layer.forward(y, t) + weight_decay\n","\n","  def accuracy(self, x, t):\n","    y = self.predict(x, is_train=False)\n","    y = np.argmax(y, axis=1)\n","    if t.ndim != 1:\n","      t = np.argmax(t, axis=1)\n","\n","    accuracy = np.sum(y == t) / float(x.shape[0])\n","    return accuracy\n","\n","  def gradient(self, x, t):\n","    self.loss(x, t, is_train=True)\n","\n","    dout = 1\n","    dout = self.last_layer.backward(dout)\n","\n","    layers = list(self.layers.values())\n","    layers.reverse()\n","\n","    for layer in layers:\n","      dout = layer.backward(dout)\n","\n","    grads = {}\n","    for idx in range(1, self.hidden_layer_num+2):\n","      grads['W' + str(idx)] = self.layers['Layer' + str(idx)].dW + self.decay_lambda * self.params['W' + str(idx)]\n","      grads['b' + str(idx)] = self.layers['Layer' + str(idx)].db\n","\n","      if self.use_batchnorm and idx != self.hidden_layer_num + 1:\n","        grads['gamma' + str(idx)] = self.layers['BatchNorm' + str(idx)].dgamma\n","        grads['beta' + str(idx)] = self.layers['BatchNorm' + str(idx)].dbeta\n","\n","    return grads"],"execution_count":21,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pHtNGXBqt4Vp"},"source":["### 모델 생성 및 학습 1\n","- 사용한 기법\n","  - 학습데이터 수 10,000\n","\n","  - Hidden Layers : 4\n","    - [128, 256, 128, 64]\n","  - Adam\n","  - EPOCHS : 1000\n","  - 학습률 : 1e-2 (0.01)\n","  - 배치사이즈 : 128\n","  - 배치 정규화\n","  - 규제화 : 0"]},{"cell_type":"markdown","metadata":{"id":"lXAz-S0Nv0gn"},"source":["### Hyper Parameters"]},{"cell_type":"code","metadata":{"id":"maUj-a-5vg5i","executionInfo":{"status":"ok","timestamp":1601798437166,"user_tz":-540,"elapsed":1378,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["epochs = 1000\n","learning_rate = 1e-2\n","batch_size = 128\n","train_size = x_train.shape[0]\n","iter_per_epoch = max(train_size/batch_size, 1)"],"execution_count":67,"outputs":[]},{"cell_type":"code","metadata":{"id":"QUxhUnI4vhHt","executionInfo":{"status":"ok","timestamp":1601798437613,"user_tz":-540,"elapsed":1541,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["decay_lambda = 0\n","model_1 = MyModel(input_size=784, hidden_size_list=[128, 256, 128, 64], output_size=10, \n","                  decay_lambda=decay_lambda, use_batchnorm=True)"],"execution_count":68,"outputs":[]},{"cell_type":"code","metadata":{"id":"lDHmqeUl2qPN","executionInfo":{"status":"ok","timestamp":1601798437614,"user_tz":-540,"elapsed":1251,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["optimizer = Adam(learning_rate=learning_rate)"],"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"id":"4h1_KYo12qqd","executionInfo":{"status":"ok","timestamp":1601798437616,"user_tz":-540,"elapsed":990,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["model_1_train_loss_list = []\n","model_1_train_acc_list = []\n","model_1_test_acc_list = []"],"execution_count":70,"outputs":[]},{"cell_type":"code","metadata":{"id":"WwPofLPxvhFo","executionInfo":{"status":"ok","timestamp":1601798784280,"user_tz":-540,"elapsed":347397,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}},"outputId":"4c0fab64-ec70-4656-9695-f63221379c25","colab":{"base_uri":"https://localhost:8080/","height":357}},"source":["for epoch in range(epochs):\n","  batch_mask = np.random.choice(train_size, batch_size)\n","  x_batch = x_train[batch_mask]\n","  y_batch = y_train[batch_mask]\n","\n","  grads = model_1.gradient(x_batch, y_batch)\n","  optimizer.update(model_1.params, grads)\n","\n","  loss = model_1.loss(x_batch, y_batch)\n","  model_1_train_loss_list.append(loss)\n","\n","  train_acc = model_1.accuracy(x_train, y_train)\n","  test_acc = model_1.accuracy(x_test, y_test)\n","  model_1_train_acc_list.append(train_acc)\n","  model_1_test_acc_list.append(test_acc)\n","\n","  if epoch % 50 == 0:\n","    print('[Model 1] Epoch: {}, Train Loss: {:.4f}, Train Acc: {:.4f}, Test Acc: {:.4f}'.format(epoch+1, loss, train_acc, test_acc))"],"execution_count":71,"outputs":[{"output_type":"stream","text":["[Model 1] Epoch: 1, Train Loss: 10.7858, Train Acc: 0.2616, Test Acc: 0.2353\n","[Model 1] Epoch: 51, Train Loss: 0.2029, Train Acc: 0.9278, Test Acc: 0.8977\n","[Model 1] Epoch: 101, Train Loss: 0.1758, Train Acc: 0.9456, Test Acc: 0.9007\n","[Model 1] Epoch: 151, Train Loss: 0.1315, Train Acc: 0.9638, Test Acc: 0.9257\n","[Model 1] Epoch: 201, Train Loss: 0.0460, Train Acc: 0.9701, Test Acc: 0.9210\n","[Model 1] Epoch: 251, Train Loss: 0.0473, Train Acc: 0.9836, Test Acc: 0.9257\n","[Model 1] Epoch: 301, Train Loss: 0.1185, Train Acc: 0.9801, Test Acc: 0.9333\n","[Model 1] Epoch: 351, Train Loss: 0.0172, Train Acc: 0.9844, Test Acc: 0.9383\n","[Model 1] Epoch: 401, Train Loss: 0.0128, Train Acc: 0.9867, Test Acc: 0.9313\n","[Model 1] Epoch: 451, Train Loss: 0.0117, Train Acc: 0.9795, Test Acc: 0.9327\n","[Model 1] Epoch: 501, Train Loss: 0.0629, Train Acc: 0.9738, Test Acc: 0.9243\n","[Model 1] Epoch: 551, Train Loss: 0.0210, Train Acc: 0.9792, Test Acc: 0.9237\n","[Model 1] Epoch: 601, Train Loss: 0.0145, Train Acc: 0.9882, Test Acc: 0.9287\n","[Model 1] Epoch: 651, Train Loss: 0.0047, Train Acc: 0.9848, Test Acc: 0.9373\n","[Model 1] Epoch: 701, Train Loss: 0.0064, Train Acc: 0.9897, Test Acc: 0.9367\n","[Model 1] Epoch: 751, Train Loss: 0.0016, Train Acc: 0.9950, Test Acc: 0.9427\n","[Model 1] Epoch: 801, Train Loss: 0.0227, Train Acc: 0.9923, Test Acc: 0.9387\n","[Model 1] Epoch: 851, Train Loss: 0.0079, Train Acc: 0.9912, Test Acc: 0.9380\n","[Model 1] Epoch: 901, Train Loss: 0.0023, Train Acc: 0.9927, Test Acc: 0.9463\n","[Model 1] Epoch: 951, Train Loss: 0.0033, Train Acc: 0.9942, Test Acc: 0.9383\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Q1GqiWjN4ry4"},"source":["#### 시각화"]},{"cell_type":"code","metadata":{"id":"9cl9oGWNvhES","executionInfo":{"status":"ok","timestamp":1601798869758,"user_tz":-540,"elapsed":1495,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}},"outputId":"128a5dec-7df4-45ad-868c-e5ee758cbff1","colab":{"base_uri":"https://localhost:8080/","height":283}},"source":["x = np.arange(len(model_1_train_acc_list))\n","\n","plt.plot(x, model_1_train_acc_list, 'bo', label='train', markersize=3)\n","plt.plot(x, model_1_test_acc_list, 'rv', label='test', markersize=1)\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.grid()\n","plt.ylim(0, 1.0)\n","plt.legend()\n","plt.show()"],"execution_count":72,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"kDFYdkxkvgmb","executionInfo":{"status":"ok","timestamp":1601798870953,"user_tz":-540,"elapsed":1212,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}},"outputId":"98475ed8-5e52-42bf-b2ee-9961ea0ae958","colab":{"base_uri":"https://localhost:8080/","height":279}},"source":["x = np.arange(len(model_1_train_loss_list))\n","\n","plt.plot(x, model_1_train_loss_list, 'g--', label='train', markersize=3)\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.grid()\n","plt.legend()\n","plt.show()"],"execution_count":73,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}