{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"조철현 - _역전파 이용한 다층 신경망 만들기","provenance":[{"file_id":"1-1aGhsD8eqtN6LQRf2wm96caCJGAC4rT","timestamp":1601802036509},{"file_id":"10UPbcolU3Kb1PSZai3J7nc5WGjsJ5ly_","timestamp":1601737619988}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Bz-0zFPpJ3Jz"},"source":["### MNIST 분류 with 역전파\n"]},{"cell_type":"markdown","metadata":{"id":"eW3InPxBJ6qo"},"source":["#### Modules Import"]},{"cell_type":"code","metadata":{"id":"ZKtAhkm4J2Z3","executionInfo":{"status":"ok","timestamp":1601826321862,"user_tz":-540,"elapsed":2609,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","plt.style.use(['seaborn-whitegrid'])\n","from collections import OrderedDict"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F1_2_jGMKGiT"},"source":["#### 데이터 로드"]},{"cell_type":"code","metadata":{"id":"S3SQq80sJ8mR","executionInfo":{"status":"ok","timestamp":1601826322349,"user_tz":-540,"elapsed":3088,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}},"outputId":"a41ff7de-8333-4ecf-9a6b-4e30c7819182","colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["np.random.seed(42)\n","\n","mnist = tf.keras.datasets.mnist\n","\n","(X_train, y_train), (X_test, y_test) = mnist.load_data()\n","\n","num_classes = 10"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mv_pjKdxKKIy"},"source":["#### 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"B95lI86tKIyY","executionInfo":{"status":"ok","timestamp":1601826322350,"user_tz":-540,"elapsed":3085,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["X_train, X_test = X_train.reshape(-1, 28 * 28).astype(np.float32), X_test.reshape(-1, 28 * 28).astype(np.float32)\n","\n","X_train /= .255\n","X_test /= .255\n","\n","y_train = np.eye(num_classes)[y_train]"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"ar7DZIlMKLjJ","executionInfo":{"status":"ok","timestamp":1601826322351,"user_tz":-540,"elapsed":3063,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}},"outputId":"3796255b-b863-48f2-daa3-fd4131949b5c","colab":{"base_uri":"https://localhost:8080/","height":89}},"source":["print(X_train.shape)\n","print(y_train.shape)\n","print(X_test.shape)\n","print(y_test.shape)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["(60000, 784)\n","(60000, 10)\n","(10000, 784)\n","(10000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Oye4pC82KPbg"},"source":["#### Hyper Parameters"]},{"cell_type":"code","metadata":{"id":"rFeXORJjKM7s","executionInfo":{"status":"ok","timestamp":1601826322352,"user_tz":-540,"elapsed":3061,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["epochs = 1000\n","learning_rate = 1e-3\n","batch_size = 100\n","train_size = X_train.shape[0]"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cIdzuyRDKSm0"},"source":["#### Util Functions"]},{"cell_type":"code","metadata":{"id":"8E2_fN1dKRzv","executionInfo":{"status":"ok","timestamp":1601826322777,"user_tz":-540,"elapsed":3482,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["def softmax(x):\n","  if x.ndim == 2:\n","    x = x.T\n","    x = x - np.max(x, axis=0)\n","    y = np.exp(x) / np.sum(np.exp(x), axis=0)\n","    return y.T\n","\n","  x = x - np.max(x)\n","  return np.exp(x) / np.sum(np.exp(x))\n","\n","def mean_squared_error(pred_y, true_y):\n","  return 0.5 * np.sum((pred_y - true_y)**2)\n","\n","def cross_entropy_error(pred_y, true_y):\n","  if pred_y.ndim == 1:\n","    true_y = true_y.reshape(1, true_y.size)\n","    pred_y = pred_y.reshape(1, pred_y.size)\n","\n","  if true_y.size == pred_y.size:\n","    true_y = true_y.argmax(axis=1)\n","\n","  batch_size = pred_y.shape[0]\n","  return -np.sum(np.log(pred_y[np.arange(batch_size), true_y] + 1e-7)) / batch_size\n","\n","def softmax_loss(X, true_y):\n","  pred_y = softmax(X)\n","  return cross_entropy_error(pred_y, true_y)\n"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SBvWUNh-KY2R"},"source":["#### Util Classes"]},{"cell_type":"markdown","metadata":{"id":"rc0sLXWJs8Dq"},"source":["##### ReLU"]},{"cell_type":"code","metadata":{"id":"ej2m6Robs-uJ","executionInfo":{"status":"ok","timestamp":1601826322778,"user_tz":-540,"elapsed":3478,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class ReLU():\n","  def __init__(self):\n","    self.out = None\n","\n","  def forward(self, x):\n","    self.mask = (x < 0)\n","    out = x.copy()\n","    out[x<0] = 0\n","    return out\n","\n","  def backward(self, dout):\n","    dout[self.mask] = 0\n","    dx = dout\n","    return dx"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RucLfG0EtYcf"},"source":["##### Sigmoid"]},{"cell_type":"code","metadata":{"id":"TWoPmtpNtZ__","executionInfo":{"status":"ok","timestamp":1601826322779,"user_tz":-540,"elapsed":3474,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class Sigmoid():\n","\n","  def __init__(self):\n","    self.out = None\n","\n","  def forward(self, x):\n","    out = 1 / (1 + np.exp(-x))\n","    return out\n","\n","  def backward(self, x):\n","    out = self.forward(x)\n","    dx = out * (1.0 - out)\n","    return dx"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IZZeNtd-tuM5"},"source":["##### Layer"]},{"cell_type":"code","metadata":{"id":"NEcCZ4bFtzgq","executionInfo":{"status":"ok","timestamp":1601826322779,"user_tz":-540,"elapsed":3471,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class Layer():\n","\n","  def __init__(self, W, b):\n","    self.W = W\n","    self.b = b\n","\n","    self.x = None\n","    self.origin_x_shape = None\n","\n","    self.dL_dW = None\n","    self.dL_db = None\n","\n","  def forward(self, x):\n","    self.origin_x_shape = x.shape\n","\n","    x = x.reshape(x.shape[0], -1)\n","    self.x = x\n","    out = np.dot(self.x, self.W) + self.b\n","\n","    return out\n","\n","  def backward(self, dout):\n","    dx = np.dot(dout, self.W.T)\n","    self.dL_dW = np.dot(self.x.T, dout)\n","    self.dL_db = np.sum(dout, axis=0)\n","    dx = dx.reshape(*self.origin_x_shape)\n","    return dx"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s1Yqp7kVvOoD"},"source":["#### Softmax"]},{"cell_type":"code","metadata":{"id":"0RXBVEMdvP9r","executionInfo":{"status":"ok","timestamp":1601826322780,"user_tz":-540,"elapsed":3468,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class SoftMax():\n","\n","  def __init__(self):\n","    self.loss = None\n","    self.y = None\n","    self.t = None\n","\n","  def forward(self, x, t):\n","    self.t = t\n","    self.y = softmax(x)\n","    self.loss = cross_entropy_error(self.y, self.t)\n","\n","    return self.loss\n","  \n","  def backward(self, dout=1):\n","    batch_size = self.t.shape[0]\n","\n","    if self.t.size == self.y.size:\n","      dx = (self.y - self.t) / batch_size\n","    else:\n","      dx = self.y.copy()\n","      dx[np.arange(batch_size), self.t] -= 1\n","      dx = dx / batch_size\n","\n","    return dx"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"sX4I-bKfuRaq","executionInfo":{"status":"ok","timestamp":1601826322781,"user_tz":-540,"elapsed":3462,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["class MyModel():\n","\n","  def __init__(self, input_size, hidden_size_list, output_size, activation='relu'):\n","    self.input_size = input_size\n","    self.output_size = output_size\n","    self.hidden_size_list = hidden_size_list\n","    self.hidden_layer_num = len(hidden_size_list)\n","    self.params = {}\n","\n","    self.__init_weights(activation)\n","\n","    activation_layer = {'sigmoid':Sigmoid, 'relu':ReLU}\n","    self.layers = OrderedDict()\n","    for idx in range(1, self.hidden_layer_num + 1):\n","      self.layers['Layer' + str(idx)] = Layer(self.params['W' + str(idx)], self.params['b' + str(idx)])\n","      self.layers['Activation_function' + str(idx)] = activation_layer[activation]()\n","\n","    idx = self.hidden_layer_num + 1\n","    self.layers['Layer' + str(idx)] = Layer(self.params['W' + str(idx)], self.params['b' + str(idx)])\n","\n","    self.last_layer = SoftMax()\n","\n","  def __init_weights(self, activation):\n","    weight_std = None\n","    all_size_list = [self.input_size] + self.hidden_size_list + [self.output_size]\n","    for idx in range(1, len(all_size_list)):\n","      if activation.lower() == \"relu\":\n","        weight_std = np.sqrt(2.0 / self.input_size)\n","      elif activation.lower() == 'sigmoid':\n","        weight_std = np.sqrt(1.0 / self.input_size)\n","      \n","      self.params['W' + str(idx)] = weight_std * np.random.randn(all_size_list[idx-1], all_size_list[idx])\n","      self.params['b' + str(idx)] = np.random.randn(all_size_list[idx])\n","\n","  def predict(self, x):\n","    for layer in self.layers.values():\n","      x = layer.forward(x)\n","\n","    return x\n","\n","  def loss(self, x, true_y):\n","    pred_y = self.predict(x)\n","\n","    return self.last_layer.forward(pred_y, true_y)\n","\n","  def accuracy(self, x, true_y):\n","    pred_y = self.predict(x)\n","    pred_y = np.argmax(pred_y, axis=1)\n","\n","    if true_y.ndim != 1:\n","      true_y = np.argmax(true_y, axis=1)\n","\n","    accuracy = np.sum(pred_y == true_y) / float(x.shape[0])\n","    return accuracy\n","\n","  def gradient(self, x, t):\n","    self.loss(x, t)\n","\n","    dout = 1\n","    dout = self.last_layer.backward(dout)\n","\n","    layers = list(self.layers.values())\n","    layers.reverse()\n","    for layer in layers:\n","      dout = layer.backward(dout)\n","\n","    grads = {}\n","    for idx in range(1, self.hidden_layer_num+2):\n","      grads['W' + str(idx)] = self.layers['Layer' + str(idx)].dL_dW\n","      grads['b' + str(idx)] = self.layers['Layer' + str(idx)].dL_db\n","\n","    return grads\n","      "],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LwyNo3TsyDZR"},"source":["#### 모델 생성 및 학습"]},{"cell_type":"code","metadata":{"id":"Du5naLufxMvv","executionInfo":{"status":"ok","timestamp":1601826388571,"user_tz":-540,"elapsed":1118,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["model = MyModel(28*28, [32, 64, 128, 64], 10, activation='relu')"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rb0HhW9x0mrN","executionInfo":{"status":"ok","timestamp":1601826388572,"user_tz":-540,"elapsed":702,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}}},"source":["train_loss_list = []\n","train_acc_list = []\n","test_acc_list = []"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"11sa2DZb-hzt","executionInfo":{"status":"ok","timestamp":1601826409224,"user_tz":-540,"elapsed":20820,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}},"outputId":"86f3f469-340b-4742-c997-1dc2368a439a","colab":{"base_uri":"https://localhost:8080/","height":377}},"source":["for epoch in range(epochs):\n","  batch_mask = np.random.choice(train_size, batch_size)\n","  x_batch = X_train[batch_mask]\n","  y_batch = y_train[batch_mask]\n","\n","  grad = model.gradient(x_batch, y_batch)\n","\n","  for key in model.params.keys():\n","    model.params[key] -= learning_rate * grad[key]\n","\n","  loss = model.loss(x_batch, y_batch)\n","  train_loss_list.append(loss)\n","\n","  if epoch % 50 == 0:\n","    train_acc = model.accuracy(X_train, y_train)\n","    test_acc = model.accuracy(X_test, y_test)\n","    train_acc_list.append(train_acc)\n","    test_acc_list.append(test_acc)\n","    print('Epoch: {}, Train Accuracy: {:.4f}, Test Accuracy: {:.4f}'.format(epoch+1, train_acc, test_acc))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Epoch: 1, Train Accuracy: 0.1301, Test Accuracy: 0.1295\n","Epoch: 51, Train Accuracy: 0.5375, Test Accuracy: 0.5493\n","Epoch: 101, Train Accuracy: 0.6577, Test Accuracy: 0.6683\n","Epoch: 151, Train Accuracy: 0.7091, Test Accuracy: 0.7145\n","Epoch: 201, Train Accuracy: 0.7459, Test Accuracy: 0.7487\n","Epoch: 251, Train Accuracy: 0.7679, Test Accuracy: 0.7797\n","Epoch: 301, Train Accuracy: 0.7924, Test Accuracy: 0.7983\n","Epoch: 351, Train Accuracy: 0.8072, Test Accuracy: 0.8143\n","Epoch: 401, Train Accuracy: 0.8050, Test Accuracy: 0.8140\n","Epoch: 451, Train Accuracy: 0.8312, Test Accuracy: 0.8389\n","Epoch: 501, Train Accuracy: 0.8380, Test Accuracy: 0.8486\n","Epoch: 551, Train Accuracy: 0.8419, Test Accuracy: 0.8540\n","Epoch: 601, Train Accuracy: 0.8484, Test Accuracy: 0.8564\n","Epoch: 651, Train Accuracy: 0.8537, Test Accuracy: 0.8597\n","Epoch: 701, Train Accuracy: 0.8499, Test Accuracy: 0.8581\n","Epoch: 751, Train Accuracy: 0.8622, Test Accuracy: 0.8743\n","Epoch: 801, Train Accuracy: 0.8573, Test Accuracy: 0.8692\n","Epoch: 851, Train Accuracy: 0.8697, Test Accuracy: 0.8784\n","Epoch: 901, Train Accuracy: 0.8698, Test Accuracy: 0.8767\n","Epoch: 951, Train Accuracy: 0.8742, Test Accuracy: 0.8813\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VV5PciwAxM6s","executionInfo":{"status":"ok","timestamp":1601826508957,"user_tz":-540,"elapsed":804,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}},"outputId":"5165beee-6520-46e4-fea1-bac3620bebd5","colab":{"base_uri":"https://localhost:8080/","height":291}},"source":["plt.plot(np.arange(1000//50), train_acc_list, 'r--', label='train_acc')\n","plt.plot(np.arange(1000//50), test_acc_list, 'b', label='test_acc')\n","\n","plt.title('Result')\n","plt.xlabel('Epochs')\n","plt.legend(loc=5)\n","plt.grid()\n","plt.show()"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"dqqlZOF6KjDl","executionInfo":{"status":"ok","timestamp":1601826510471,"user_tz":-540,"elapsed":955,"user":{"displayName":"조철현","photoUrl":"","userId":"00177750111141030520"}},"outputId":"b89ebfbb-c07d-4035-c0e9-e587ed6dc609","colab":{"base_uri":"https://localhost:8080/","height":291}},"source":["plt.plot(np.arange(1000), train_loss_list, 'green', label='train_loss')\n","plt.title('train loss')\n","plt.xlabel('Epochs')\n","plt.legend(loc=5)\n","plt.grid()\n","plt.show()"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ABlyERND9Tub"},"source":[""],"execution_count":null,"outputs":[]}]}